import streamlit as st
st.set_page_config(page_title='Grade 9 Questions', page_icon='üìö', layout='wide')
import json
import re
from urllib.parse import urlencode

st.title('Review explanations for math 9 - v1.0')



def convert_latex2url(math):
    math = math.replace(r"\n", "").replace("$", "") if math.startswith("\\[") else math.replace("$", "")
    math = math[2:-2] if math.startswith("\\(") or math.startswith("\\[") else math[1:-1]
    
    params = {
    'type': 'latex',
    'from': f'''{math}'''
    }
    encoded_params = urlencode(params)
    math_converter_url = "https://math-honeycomb.giainhanh.io"
    img_url = f'{math_converter_url}/img?{encoded_params}'
    return f'![]({img_url})'

def convert_explanation(explanation):
    math_pattern = r'(\$\$|\\[\[\(])([\s\S]*?)(\$\$|\\[\]\)])'
    replaced_content = re.sub(math_pattern, lambda match: convert_latex2url(match.group(0)), explanation)

    return replaced_content


tab1, tab2, tab3, tab4 = st.tabs(["Guide", "Essay questions", "Multi-choice questions + corrected options + hints", "Multi-choice questions + corrected options"])

with tab1:
    with open('testset_essay_questions_gen_explanation.json', 'r') as f:
        questions = json.load(f)
    st.write('**H∆∞·ªõng d·∫´n**')
    st.markdown('''
    - Ch·ªçn tab `Essay questions` ƒë·ªÉ xem v√† ƒë√°nh gi√° gi·∫£i th√≠ch AI v·ªõi c√¢u h·ªèi t·ª± lu·∫≠n to√°n 9.
    - S·ª≠ d·ª•ng thanh tr∆∞·ª£t ƒë·ªÉ ch·ªçn c√¢u h·ªèi.
    - V·ªõi m·ªói c√¢u h·ªèi, h√£y nh·∫•n v√†o n√∫t `Like` ho·∫∑c `Dislike` ƒë·ªÉ ƒë√°nh gi√° gi·∫£i th√≠ch AI.
    - N·∫øu th·∫•y h√†i l√≤ng v·ªõi gi·∫£i th√≠ch AI - nh·∫•n n√∫t `Like`. L∆∞u √Ω: ch·ªâ n√™n nh·∫•n 1 l·∫ßn cho m·ªôt c√¢u h·ªèi.  
    - N·∫øu th·∫•y kh√¥ng h√†i l√≤ng v·ªõi gi·∫£i th√≠ch AI - nh·∫•n n√∫t `Dislike`. L∆∞u √Ω: ch·ªâ n√™n nh·∫•n 1 l·∫ßn cho m·ªôt c√¢u h·ªèi.
    - N·∫øu ·∫•n nh·∫ßm `Like` tr√™n m·ªôt l·∫ßn, c√≥ th·ªÉ s·ª≠ d·ª•ng `Dislike` gi·∫£m s·ªë l∆∞·ª£t like xu·ªëng v·ªõi s·ªë l·∫ßn nh·∫•n `Like` t∆∞∆°ng ·ª©ng.
                ''')

with tab2:

    st.write('***V·ªõi c√°c c√¢u h·ªèi t·ª± lu·∫≠n to√°n l·ªõp 9, c√≥ g·ª£i √Ω nh∆∞ng v·∫´n kh√≥ hi·ªÉu. S·ª≠ d·ª•ng AI t·∫°o gi·∫£i th√≠ch d·ªÖ hi·ªÉu h∆°n...***')

    index = st.slider('Select question', 1, len(questions)-1, 1, step=2, key='slider1')-1

    col1, col2 = st.columns(2)

    with col1:
        if st.button('Like', key=f'button1_{index}'):
            questions[index]['is_good_explanation'] += 1
            with open('testset_essay_questions_gen_explanation.json', 'w') as f:
                json.dump(questions, f, indent=4, ensure_ascii=False)
        if st.button('Dislike', key=f'dislike_button1_{index}'):
            questions[index]['is_good_explanation'] -= 1
            with open('testset_essay_questions_gen_explanation.json', 'w') as f:
                json.dump(questions, f, indent=4, ensure_ascii=False)
        st.header(f'C√¢u h·ªèi {index+1}:')
        st.markdown(convert_explanation(questions[index]['question_text']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header("Gi·∫£i th√≠ch:")
        st.markdown(convert_explanation(questions[index]['explanation']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header('AI gi·∫£i th√≠ch:')
        st.markdown(convert_explanation(questions[index]['ai_explanation']), unsafe_allow_html=True)

    with col2:
        if st.button('Like', key=f'button2_{index}'):
            questions[index+1]['is_good_explanation'] += 1
            with open('testset_essay_questions_gen_explanation.json', 'w') as f:
                json.dump(questions, f, indent=4, ensure_ascii=False)   
        if st.button('Dislike', key=f'dislike_button2_{index}'):
            questions[index]['is_good_explanation'] -= 1
            with open('testset_essay_questions_gen_explanation.json', 'w') as f:
                json.dump(questions, f, indent=4, ensure_ascii=False)
        st.header(f'C√¢u h·ªèi {index+2}:')
        st.markdown(convert_explanation(questions[index+1]['question_text']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header("Gi·∫£i th√≠ch:")
        st.markdown(convert_explanation(questions[index+1]['explanation']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header('AI Gi·∫£i th√≠ch:')
        st.markdown(convert_explanation(questions[index+1]['ai_explanation']), unsafe_allow_html=True)

with tab3:
    with open('testset_multi_choice_questions_gen_explanation.json', 'r') as f:
        questions2 = json.load(f)
    st.write('***V·ªõi c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám c√≥ ƒë√°p √°n v√† g·ª£i √Ω nh∆∞ng v·∫´n kh√≥ hi·ªÉu, s·ª≠ d·ª•ng AI ƒë·ªÉ gi·∫£i th√≠ch l·∫°i d·ªÖ hi·ªÉu h∆°n...***')
    index2 = st.slider('Select question', 1, len(questions2)-1, 1, step=2, key='slider2')-1
    col3, col4 = st.columns(2)
    with col3:
        if st.button('Like', key=f'button3_{index}'):
            questions2[index2]['is_good_explanation'] += 1
            with open('testset_multi_choice_questions_gen_explanation.json', 'w') as f:
                json.dump(questions2, f, indent=4, ensure_ascii=False)
        if st.button('Dislike', key=f'dislike_button3_{index}'):
            questions2[index2]['is_good_explanation'] -= 1
            with open('testset_multi_choice_questions_gen_explanation.json', 'w') as f:
                json.dump(questions2, f, indent=4, ensure_ascii=False)
        st.header(f'C√¢u h·ªèi {index2+1}:')
        st.markdown(convert_explanation(questions2[index2]['question_text']), unsafe_allow_html=True)
        st.markdown(convert_explanation(questions2[index2]['options']), unsafe_allow_html=True)
        st.markdown("**ƒê√°p √°n ƒë√∫ng:**")
        st.markdown(convert_explanation(questions2[index2]['correct_option']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header("Gi·∫£i th√≠ch:")
        st.markdown(convert_explanation(questions2[index2]['explanation']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header('AI gi·∫£i th√≠ch:')
        st.markdown(convert_explanation(questions2[index2]['ai_explanation']), unsafe_allow_html=True)
    with col4:
        if st.button('Like', key=f'button4_{index}'):
            questions2[index2+1]['is_good_explanation'] += 1
            with open('testset_multi_choice_questions_gen_explanation.json', 'w') as f:
                json.dump(questions2, f, indent=4, ensure_ascii=False)
        if st.button('Dislike', key=f'dislike_button4_{index}'):
            questions2[index2+1]['is_good_explanation'] -= 1
            with open('testset_multi_choice_questions_gen_explanation.json', 'w') as f:
                json.dump(questions2, f, indent=4, ensure_ascii=False)
        st.header(f'C√¢u h·ªèi {index2+2}:')
        st.markdown(convert_explanation(questions2[index2+1]['question_text']), unsafe_allow_html=True)
        st.markdown(convert_explanation(questions2[index2+1]['options']), unsafe_allow_html=True)
        st.markdown("**ƒê√°p √°n ƒë√∫ng:**")
        st.markdown(convert_explanation(questions2[index2+1]['correct_option']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header("Gi·∫£i th√≠ch:")
        st.markdown(convert_explanation(questions2[index2+1]['explanation']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header('AI gi·∫£i th√≠ch:')
        st.markdown(convert_explanation(questions2[index2+1]['ai_explanation']), unsafe_allow_html=True)

with tab4:
    st.write('***V·ªõi c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám c√≥ ƒë√°p √°n nh∆∞ng v·∫´n kh√≥ hi·ªÉu t·∫°i sao l·∫°i ch·ªçn ƒë√°p ƒë√≥, s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o gi·∫£i th√≠ch d·ªÖ hi·ªÉu h∆°n...***')
    with open('testset_multi_choice_questions_without_hint_gen_explanation.json', 'r') as f:
        questions3 = json.load(f)
    index3 = st.slider('Select question', 1, len(questions3)-1, 1, step=2, key='slider3')-1
    col5, col6 = st.columns(2)
    with col5:
        if st.button('Like', key=f'button5_{index}'):
            questions3[index3]['is_good_explanation'] += 1
            with open('testset_multi_choice_questions_without_hint_gen_explanation.json', 'w') as f:
                json.dump(questions3, f, indent=4, ensure_ascii=False)
        if st.button('Dislike', key=f'dislike_button5_{index}'):
            questions3[index3]['is_good_explanation'] -= 1
            with open('testset_multi_choice_questions_without_hint_gen_explanation.json', 'w') as f:
                json.dump(questions3, f, indent=4, ensure_ascii=False)
        st.header(f'C√¢u h·ªèi {index3+1}:')
        st.markdown(convert_explanation(questions3[index3]['question_text']), unsafe_allow_html=True)
        st.markdown(convert_explanation(questions3[index3]['options']), unsafe_allow_html=True)
        st.markdown("**ƒê√°p √°n ƒë√∫ng:**")
        st.markdown(convert_explanation(questions3[index3]['correct_option']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header('AI gi·∫£i th√≠ch:')
        st.markdown(convert_explanation(questions3[index3]['ai_explanation']), unsafe_allow_html=True)
    with col6:
        if st.button('Like', key=f'button6_{index}'):
            questions3[index3+1]['is_good_explanation'] += 1
            with open('testset_multi_choice_questions_without_hint_gen_explanation.json', 'w') as f:
                json.dump(questions3, f, indent=4, ensure_ascii=False)
        if st.button('Dislike', key=f'dislike_button6_{index}'):
            questions3[index3+1]['is_good_explanation'] -= 1
            with open('testset_multi_choice_questions_without_hint_gen_explanation.json', 'w') as f:
                json.dump(questions3, f, indent=4, ensure_ascii=False)
        st.header(f'C√¢u h·ªèi {index3+2}:')
        st.markdown(convert_explanation(questions3[index3+1]['question_text']), unsafe_allow_html=True)
        st.markdown(convert_explanation(questions3[index3+1]['options']), unsafe_allow_html=True)
        st.markdown("**ƒê√°p √°n ƒë√∫ng:**")
        st.markdown(convert_explanation(questions3[index3+1]['correct_option']), unsafe_allow_html=True)
        st.write("----------------------------------------")
        st.header('AI gi·∫£i th√≠ch:')
        st.markdown(convert_explanation(questions3[index3+1]['ai_explanation']), unsafe_allow_html=True)